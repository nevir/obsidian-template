// https://biomejs.dev/reference/configuration/
{
  // https://biomejs.dev/reference/configuration/#files
  "vcs": {
    "enabled": true,
    "clientKind": "git",
    "useIgnoreFile": true
  },

  // https://biomejs.dev/reference/configuration/#formatter
  "formatter": {
    "enabled": true,
    "indentStyle": "space",
    "indentWidth": 2,
    "lineEnding": "lf",
    "lineWidth": 80
  },

  // https://biomejs.dev/reference/configuration/#organizeimports
  "organizeImports": {
    "enabled": true
  },

  // https://biomejs.dev/reference/configuration/#javascript
  "javascript": {
    "formatter": {
      "quoteStyle": "single",
      "jsxQuoteStyle": "single",
      "quoteProperties": "asNeeded",
      "trailingCommas": "all",
      "semicolons": "always",
      "arrowParentheses": "asNeeded",
      "bracketSameLine": false
    }
  },

  // https://biomejs.dev/reference/configuration/#overrides
  "overrides": [
    {
      "include": [".vscode/**"],
      "json": {
        "parser": {
          "allowComments": true,
          "allowTrailingCommas": true
        },
        "formatter": {
          "trailingCommas": "all"
        }
      }
    }
  ],

  // https://biomejs.dev/reference/configuration/#linter
  "linter": {
    // https://biomejs.dev/linter/rules/
    "rules": {
      // Forces us to be explicit when upgrading Biome.
      "recommended": false,

      // https://biomejs.dev/linter/rules/#accessibility
      "a11y": {
        // The accesskey attribute is inconsistently implemented across
        // browsers, and tends to more harm than good by conflicting with
        // screen readers.
        //
        // https://webaim.org/techniques/keyboard/accesskey#poor
        "noAccessKey": "error",

        // If an element is focusable, we shouldn't be hiding it.
        "noAriaHiddenOnFocusable": "error",

        // Can confuse screen readers.
        "noAriaUnsupportedElements": "error",

        // While this can be problematic for screen readers, it is also
        // something that we find useful in certain scenarios.
        "noAutofocus": "off",

        // target="_blank" MUST be paired with rel="noreferrer" or
        // rel="noopener", otherwise we've got a security vulnerabilty on our
        // hands.
        "noBlankTarget": "error",

        // plz no.
        "noDistractingElements": "error",

        // Avoid misuse of the scope attribute.
        "noHeaderScope": "error",

        // That wouldn't make sense, now would it?
        "noInteractiveElementToNoninteractiveRole": "error",

        // Enforce that we associate labels with their controls.
        "noLabelWithoutControl": "error",

        // We should be using the correct element for the job.
        //
        // Though, this rule may prove to be too restrictive?
        "noNoninteractiveElementToInteractiveRole": "error",

        // Screen readers can navigate non-interactive things just fine; you
        // don't need to assist 'em.
        "noNoninteractiveTabindex": "error",

        // Deviating from the content order gets really confusing really fast
        // for screen reader users.
        "noPositiveTabindex": "error",

        // If you're going to specify alt text, make sure it's meaningful.
        "noRedundantAlt": "error",

        // Avoid re-stating an element's default role.
        "noRedundantRoles": "error",

        // Enforce that svg elements have alt text (a <title> or aria-label).
        "noSvgWithoutTitle": "error",

        // Make sure that we're describing images appropriately.
        "useAltText": "error",

        // Make sure that all links have discernible text.
        "useAnchorContent": "error",

        // Descendant elements (e.g. select box options) must be tabbable.
        "useAriaActivedescendantWithTabindex": "error",

        // Make sure that we're using each aria role appropriately.
        "useAriaPropsForRole": "error",

        // The default button type is 'submit'; that's rarely what you want.
        "useButtonType": "error",

        // All interactive elements must be focusable.
        "useFocusableInteractive": "error",

        // Make sure that we have a generic font family as a fallback.
        "useGenericFontNames": "error",

        // Make sure all headers have discernible text.
        "useHeadingContent": "error",

        // Let's be explicit about our content language.
        "useHtmlLang": "error",

        // Make sure that we're describing iframes appropriately.
        "useIframeTitle": "error",

        // If you're going to make an element clickable, you'd better also make
        // it navigable via the keyboard, too. Not everyone can use a mouse.
        "useKeyWithClickEvents": "error",

        // If you're going to make an element respond to hover events, you'd
        // better also make it support similar behavior via focus events. Not
        // everyone can use a mouse.
        "useKeyWithMouseEvents": "error",

        // Enforce that we've also got accessible media.
        "useMediaCaption": "error",

        // Prefer semantic elemnts over the role attribute.
        "useSemanticElements": "error",

        // Let's not hijack standard link behaviors.
        "useValidAnchor": "error",

        // Make sure that we're using each aria attribute appropriately.
        "useValidAriaProps": "error",

        // Make sure that we're using each aria role appropriately.
        "useValidAriaRole": "error",

        // Make sure that we're using each the value of each aria attribute
        // appropriately.
        "useValidAriaValues": "error",

        // Sorry, no fictitious languages or countries here.
        "useValidLang": "error"
      },

      // https://biomejs.dev/linter/rules/#complexity
      "complexity": {
        // Avoid boxed types like Number (vs number) and {}; they're common
        // misconceptions when coming from other languages (e.g. Java).
        "noBannedTypes": "error",

        // Gotta have at least one type parameter.
        "noEmptyTypeParameters": "error",

        // While this is nice in theory, it is difficult to find a pragmatic
        // threshold in practice.
        "noExcessiveCognitiveComplexity": "off",

        // While this is nice in theory, it is difficult to find a pragmatic
        // threshold in practice.
        "noExcessiveNestedTestSuites": "off",

        // Use ! or !! rather than the boxed type.
        "noExtraBooleanCast": "error",

        // for … of is part of the language now; we prefer it.
        "noForEach": "error",

        // Multiple spaces are very difficult to notice.
        "noMultipleSpacesInRegularExpressionLiterals": "error",

        // This is often a vestige of coming from a more strongly OOP-based
        // language. It's not necessary in JavaScript; you can use a plain
        // object instead.
        "noStaticOnlyClass": "error",

        // It can be useful to reference the class from a static method,
        // especially to avoid refactoring errors in the future.
        "noThisInStatic": "off",

        // Avoid rethrows that have no behavioral change.
        "noUselessCatch": "error",

        // Avoid constructors that do nothing.
        "noUselessConstructor": "error",

        // Likely indicates an incomplete refactor.
        "noUselessEmptyExport": "error",

        // We only want to use React fragments when necessary.
        "noUselessFragments": "error",

        // Really, you shouldn't be using labels at all. But if you are…
        "noUselessLabel": "error",

        // Likely indicates an incomplete refactor.
        "noUselessLoneBlockStatements": "error",

        // Likely indicates an incomplete refactor.
        "noUselessRename": "error",

        // Combine those string literals!
        "noUselessStringConcat": "error",

        // Enforce that default is the last case in a switch statement.
        "noUselessSwitchCase": "error",

        // Prefer logical operators when possible.
        "noUselessTernary": "error",

        // Stay to `this`, unless you absolutely need to alias it.
        "noUselessThisAlias": "error",

        // Type constraints should narrow the type in some way.
        "noUselessTypeConstraint": "error",

        // Prefer implicit initialization to `undefined`.
        "noUselessUndefinedInitialization": "error",

        // Void is often misunderstood, and more fancy than we need.
        "noVoid": "error",

        // We are always working in strict mode, which gives a better error.
        "noWith": "off",

        // Prefer arrow functions unless they're not appropriate (e.g. we need
        // to reference `this`, or are defining a generator).
        //
        // Though, this rule may prove to be too restrictive?
        "useArrowFunction": "error",

        // Prefer the modern Date.now() vs new Date().getTime().
        "useDateNow": "error",

        // Consistent style, and potential memory optimization.
        "useFlatMap": "error",

        // Conflicts with TypeScript's noPropertyAccessFromIndexSignature.
        //
        // We like to be explicit when we're referencing known properties vs
        // indexing into a container.
        "useLiteralKeys": "off",

        // Simplify chained comparisons via the Elvis operator.
        "useOptionalChain": "error",

        // We reserve use of the `RegExp` constructor only for dynamic regular
        // expressions.
        "useRegexLiterals": "error",

        // Avoid keys that resolve to something other than their literal form.
        "useSimpleNumberKeys": "error",

        // Avoid expressions that are statically resolved and discard part of
        // the expression.
        "useSimplifiedLogicExpression": "off"
      },

      // https://biomejs.dev/linter/rules/#correctness
      "correctness": {
        // Pass children via JSX syntax, not as a prop.
        "noChildrenProp": "error",

        // Already handled by TypeScript.
        "noConstAssign": "off",

        // Catch cases where we might have an expression that appears useful
        // but isn't.
        "noConstantCondition": "error",

        // Avoid using Math.min, Math.max when the result is constant.
        "noConstantMathMinMaxClamp": "error",

        // Likely indicates an incomplete refactor.
        "noConstructorReturn": "error",

        // Likely indicates an incomplete refactor.
        "noEmptyCharacterClassInRegex": "error",

        // If you're going to destructure something, best make it useful.
        "noEmptyPattern": "error",

        // You can use flat() instead.
        "noFlatMapIdentity": "error",

        // Already handled by TypeScript.
        "noGlobalObjectCalls": "off",

        // Already handled by TypeScript.
        "noInnerDeclarations": "off",

        // Already handled by TypeScript, but Biome's message is more helpful.
        "noInvalidBuiltinInstantiation": "error",

        // Already handled by TypeScript.
        "noInvalidConstructorSuper": "off",

        // Common class of mistake when using linear-gradient().
        "noInvalidDirectionInLinearGradient": "error",

        // Ensure that grid areas are valid.
        "noInvalidGridAreas": "error",

        // Already handled by TypeScript.
        "noInvalidNewBuiltin": "off",

        // @import rules must be before all other rules.
        "noInvalidPositionAtImportRule": "error",

        // Already handled by TypeScript.
        "noInvalidUseBeforeDeclaration": "off",

        // Already handled by TypeScript.
        "noNewSymbol": "off",

        // Project-dependent.
        "noNodejsModules": "off",

        // Already handled by TypeScript.
        "noNonoctalDecimalEscape": "off",

        // Handled by TypeScript as a warning; we want it to be an error.
        "noPrecisionLoss": "error",

        // Handled by react-dom's typings.
        "noRenderReturnValue": "off",

        // Likely indicates an incomplete refactor.
        "noSelfAssign": "error",

        // Already handled by TypeScript.
        "noSetterReturn": "off",

        // Catch cases where we're comparing to a case that will never exist.
        "noStringCaseMismatch": "error",

        // Already handled by TypeScript.
        "noSwitchDeclarations": "off",

        // Avoid implicitly relying on transitive dependencies.
        "noUndeclaredDependencies": "error",

        // Already handled by TypeScript.
        "noUndeclaredVariables": "off",

        // Make sure we use known CSS functions.
        "noUnknownFunction": "error",

        // Make sure we use known media features.
        "noUnknownMediaFeatureName": "error",

        // Make sure we use known CSS properties.
        "noUnknownProperty": "error",

        // Make sure we use known CSS units.
        "noUnknownUnit": "error",

        // Catch selectors that cannot match any elements.
        "noUnmatchableAnbSelector": "error",

        // Already handled by TypeScript.
        "noUnusedFunctionParameters": "off",

        // Already handled by TypeScript.
        "noUnusedImports": "error",

        // Already handled by TypeScript.
        "noUnusedPrivateClassMembers": "off",

        // Likely indicates an incomplete refactor or confusion.
        "noUnnecessaryContinue": "error",

        // Already handled by TypeScript.
        "noUnreachable": "off",

        // Already handled by TypeScript.
        "noUnreachableSuper": "off",

        // Returning/throwing values from finally is likely to trip you up.
        "noUnsafeFinally": "error",

        // Catch cases where optional chaining may cause us to throw.
        "noUnsafeOptionalChaining": "error",

        // Handled by TypeScript as a warning; we want it to be an error.
        "noUnusedLabels": "error",

        // Already handled by TypeScript.
        "noUnusedVariables": "off",

        // Avoid misuse of elements that do not support children.
        "noVoidElementsWithChildren": "error",

        // If you have a void reeturn type, you should not return anything.
        "noVoidTypeReturn": "error",

        // Prefer array literas vs constructing arrays.
        "useArrayLiterals": "error",

        // Make sure that we're correctly including referenced values in
        // useMemo, etc.
        "useExhaustiveDependencies": "error",

        // No hooks in conditions.
        "useHookAtTopLevel": "error",

        // Project-dependent.
        "useImportExtensions": "off",

        // Already handled by TypeScript.
        "useIsNan": "off",

        // Catch cases where we forget a key attribute on a JSX element.
        "useJsxKeyInIterable": "error",

        // Catch cases where we're iterating in the wrong direction.
        "useValidForDirection": "error",

        // If you are authoring a generator, make sure it yields something.
        "useYield": "error"
      },

      // https://biomejs.dev/linter/rules/#performance
      "performance": {
        // Avoid accidential O(n^2) when you expected O(n).
        "noAccumulatingSpread": "error",

        // There are cases where we want this, especially in libraries.
        "noBarrelFile": "off",

        // In general, we want to avoid busting the VM's shape cache.
        "noDelete": "error",

        // There are cases where we want this, especially in libraries.
        "noReExportAll": "error",

        // This nice in theory, but in practice there are cases where we want
        // to have inline regexes to reduce import performance or to
        // improve readability.
        "useTopLevelRegex": "off"
      },

      // https://biomejs.dev/linter/rules/#security
      "security": {
        // Prevent a class of XSS attacks.
        "noDangerouslySetInnerHtml": "error",

        // Superseded by noDangerouslySetInnerHtml.
        "noDangerouslySetInnerHtmlWithChildren": "off",

        // No.
        "noGlobalEval": "error"
      },

      // https://biomejs.dev/linter/rules/#style
      "style": {
        // Prefer `...args` over `arguments`.
        "noArguments": "error",

        // You almost certainly didn't intend to use the comma operator.
        "noCommaOperator": "error",

        // While we agree with default exports being awkward in IDEs, there
        // are cases where default exports are the ergonomic choice for an API,
        // and editors are getting better at handling them.
        "noDefaultExport": "off",

        // Use async functions over callbacks in tests.
        "noDoneCallback": "error",

        // We prefer implicit booleans.
        "noImplicitBoolean": "off",

        // Let TypeScript infer types whenever possible.
        "noInferrableTypes": "error",

        // Namespaces can be helpful for some organization strategies.
        "noNamespace": "off",

        // Can be helpful for readability and dynamic referencing.
        "noNamespaceImport": "off",

        // When you've got a multi-case negated condition, prefer the
        // un-negated version (no one likes double negatives).
        "noNegationElse": "error",

        // Pragmatically, there are cases where we can safely assume that a
        // value or property exists, and a non-null assertion leads to the
        // most readable code.
        "noNonNullAssertion": "off",

        // Parameter assignment can be helpful for things like complex
        // defaults.
        "noParameterAssign": "off",

        // Parameter properties are a helpful shorthand.
        "noParameterProperties": "off",

        // We prefer to manage this via TypeScript types.
        "noRestrictedGlobals": "off",

        // If the value is a constant, use its literal form.
        "noShoutyConstants": "error",

        // We like to use template literals to indicate human-visible text.
        "noUnusedTemplateLiteral": "off",

        // We prefer flat style functions over nested functions.
        "noUselessElse": "error",

        // Use let or const.
        "noVar": "error",

        // Speak regularly, we do.
        "noYodaExpression": "error",

        // Use as const when possible to lock in literal types.
        "useAsConstAssertion": "error",

        // We commonly prefer to use blockless statements for early returns
        // (flat functions).
        "useBlockStatements": "off",

        // Sometimes nested conditionals are helpful to explain consistent
        // structures.
        "useCollapsedElseIf": "off",

        // Prefer shorthand[] array types.
        "useConsistentArrayType": {
          "level": "error",
          "options": {
            "syntax": "shorthand"
          }
        },

        // Use new for built-in types, except for boxed types.
        "useConsistentBuiltinInstantiation": "error",

        // If we never assign a variable, prefer declare it as const.
        "useConst": "error",

        // Defaults parameters really only make sense this way.
        "useDefaultParameterLast": "error",

        // Already handled by TypeScript.
        "useDefaultSwitchClause": "off",

        // Our enums very frequently are intended to be persisted, so it's best
        // that we are explicit about their values.
        "useEnumInitializers": "error",

        // Is nice in theory, but is hard to enfoce consistently without type
        // inference.
        "useExplicitLengthCheck": "off",

        // The language has built-in support for exponentation these days.
        "useExponentiationOperator": "error",

        // Allows compilers to optimize types out without type information.
        "useExportType": "error",

        // Doesn't have enough control to express the rules we want (yet).
        "useFilenamingConvention": "off",

        // Prefer for … of over for … in.
        "useForOf": "error",

        // Use <> over <React.Fragment>.
        "useFragmentSyntax": "error",

        // Allows compilers to optimize types out without type information.
        "useImportType": "error",

        // Don't get fancy with enum values; it can also lead to confusion
        // where TypeScript enums are not compatible even with the same value.
        "useLiteralEnumMembers": "error",

        // Follow community norms for naming things.
        "useNamingConvention": {
          "level": "error",
          "options": {
            "strictCase": false
          }
        },

        // It's just better.
        "useNodeAssertStrict": "error",

        // Use the node: protocol for forward compatibility.
        "useNodejsImportProtocol": "error",

        // Use Number.* instead of their global counterparts.
        "useNumberNamespace": "error",

        // No need to parseInt something that can be a literal.
        "useNumericLiterals": "error",

        // Prefer <div /> over <div></div>
        "useSelfClosingElements": "error",

        // Prefer value[] over Array<value>
        "useShorthandArrayType": "error",

        // Prefer a += 1 over a = a + 1
        "useShorthandAssign": "error",

        // When possible, use shorthand function types instead of interfaces.
        "useShorthandFunctionType": "error",

        // When we're using case statments, there are times where it is helpful
        // to have shared behavior for multiple cases.
        //
        // Otherwise, just use if statements.
        "useSingleCaseStatement": "error",

        // One declaration per line.
        "useSingleVarDeclarator": "error",

        // Prefer template strings over concatenation.
        "useTemplate": "error",

        // Already covered by useConsistentBuiltinInstantiation
        "useThrowNewError": "off",

        // Let's not use exceptions for control flow.
        "useThrowOnlyError": "error",

        // Simplify for loops to while loops when possible.
        "useWhile": "error"
      },

      // https://biomejs.dev/linter/rules/#suspicious
      "suspicious": {
        // If there's a standard constant of a value, use it.
        "noApproximativeNumericConstant": "error",

        // Sometimes we want elements that will always be in the same order.
        "noArrayIndexKey": "off",

        // Too fancy by half, and easily confused with an equality comparison.
        "noAssignInExpressions": "error",

        // You're going to get into trouble if you do it (like siltently eaten
        // errors).
        "noAsyncPromiseExecutor": "error",

        // Why would you do that?
        "noCatchAssign": "error",

        // Already handled by TypeScript.
        "noClassAssign": "off",

        // Almost certainly a mistake.
        "noCommentText": "error",

        // Let's avoid the use of negative zero.
        "noCompareNegZero": "error",

        // Goto statements are harmful. We learned this decades ago.
        "noConfusingLabels": "error",

        // You probably mean `undefined` or `never`.
        "noConfusingVoidType": "error",

        // Project-dependent.
        "noConsole": "off",

        // Project-dependent.
        "noConsoleLog": "off",

        // While the inlining of const enums is nice, it also adds to the
        // complexity of our build setup (type information of imports becomes
        // required when parsing a file).
        "noConstEnum": "error",

        // Likely indicates an input error.
        "noControlCharactersInRegex": "error",

        // Don't leave those debugger statements lying around!
        "noDebugger": "error",

        // JavaScript is weird.
        "noDoubleEquals": "error",

        // Make sure we're not double-importing CSS modules.
        "noDuplicateAtImportRules": "error",

        // Likely indicates an incomplete refactor.
        "noDuplicateCase": "error",

        // Already handled by TypeScript.
        "noDuplicateClassMembers": "off",

        // Keep font lists clean.
        "noDuplicateFontNames": "error",

        // Already handled by TypeScript.
        "noDuplicateJsxProps": "off",

        // Already handled by TypeScript.
        "noDuplicateObjectKeys": "off",

        // Already handled by TypeScript.
        "noDuplicateParameters": "off",

        // Keep keyframes clean.
        "noDuplicateSelectorsKeyframeBlock": "error",

        // Only one instance of each lifecycle hook per test context.
        "noDuplicateTestHooks": "error",

        // CSS blocks should have rules.
        "noEmptyBlock": "error",

        // Can be helpful to have empty functions.
        "noEmptyBlockStatements": "off",

        // Can be helpful as placeholders / documentation.
        "noEmptyInterface": "off",

        // Already handled by TypeScript.
        "noEvolvingTypes": "off",

        // Sometimes we legitimately need to use `any` (though please prefer
        // `unknown` where possible).
        "noExplicitAny": "off",

        // Files containing tests should expect to be run directly, and not used
        // as a module.
        "noExportsInTest": "error",

        // I know it's exciting, but let's not get carried away.
        "noExtraNonNullAssertion": "error",

        // Handled by TypeScript as a warning; we want it to be an error.
        "noFallthroughSwitchClause": "error",

        // Make sure all tests are active in main.
        "noFocusedTests": "error",

        // Already handled by TypeScript.
        "noFunctionAssign": "off",

        // Already handled by TypeScript.
        "noGlobalAssign": "off",

        // Use Number.isFinite(); it doesn't perform implicit coercion.
        "noGlobalIsFinite": "error",

        // Use Number.isNaN(); it doesn't perform implicit coercion.
        "noGlobalIsNan": "error",

        // A case that TypeScript's noImplicitAny doesn't cover.
        "noImplicitAnyLet": "error",

        // Already handled by TypeScript.
        "noImportAssign": "off",

        // Not supported by all browsers.
        "noImportantInKeyframe": "error",

        // Really, you shouldn't be using labels at all. But if you are…
        "noLabelVar": "error",

        // composite characters break RegExp character classes.
        "noMisleadingCharacterClass": "error",

        // Only allow new() on interfaces, not classes.
        "noMisleadingInstantiator": "error",

        // Too fiddly to get right for all cases.
        "noMisplacedAssertion": "off",

        // Likely indicates an incomplete refactor.
        "noMisrefactoredShorthandAssign": "error",

        // You'll get into trouble for things that don't extend Object.
        "noPrototypeBuiltins": "error",

        // Already handled by TypeScript.
        "noReactSpecificProps": "off",

        // Already handled by TypeScript.
        "noRedeclare": "off",

        // TypeScript is in charge of this.
        "noRedundantUseStrict": "error",

        // Likely indicates an incomplete refactor.
        "noSelfCompare": "error",

        // Let's not get confused by shadowing globals.
        "noShadowRestrictedNames": "error",

        // Shorthands can override more explicit properties.
        "noShorthandPropertyOverrides": "error",

        // Make sure all tests are active in main.
        "noSkippedTests": "error",

        // If you really want to use a sparse array, initialize it explicitly.
        "noSparseArray": "error",

        // Almost certainly a mistake.
        "noSuspiciousSemicolonInJsx": "error",

        // Making an object appear thenable can get you into trouble.
        "noThenProperty": "error",

        // There are some fancy cases where this is helpful for API ergonomics.
        "noUnsafeDeclarationMerging": "off",

        // Catch cases where we're negating the wrong thing.
        "noUnsafeNegation": "error",

        // Make sure that each function is in the Promise's stack.
        "useAwait": "error",

        // Enforce that default is the last case in a switch statement.
        "useDefaultSwitchClauseLast": "error",

        // In some cases we want to construct messages in other ways.
        "useErrorMessage": "off",

        // Already handled by TypeScript.
        "useGetterReturn": "off",

        // Not every array-like thing inherits Array.
        "useIsArray": "error",

        // module is deprecated in favor of namespace.
        "useNamespaceKeyword": "error",

        // Be explicit about the number of digits you want.
        "useNumberToFixedDigitsArgument": "error",

        // Already handled by TypeScript.
        "useValidTypeof": "off"
      }
    }
  }
}
